{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nimport LineTo from 'react-lineto';\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game() {\n    _classCallCheck(this, Game);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Game).apply(this, arguments));\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(GameInstance, {\n        players: [{\n          username: \"timmy\",\n          color: \"red\"\n        }, {\n          username: \"bobby\",\n          color: \"blue\"\n        }],\n        boardSize: [{\n          x: 4\n        }, {\n          y: 4\n        }]\n      });\n    }\n  }]);\n\n  return Game;\n}(React.Component);\n\nvar GameInstance =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(GameInstance, _React$Component2);\n\n  function GameInstance(props) {\n    var _this;\n\n    _classCallCheck(this, GameInstance);\n\n    var x = props.boardSize[0]['x'],\n        y = props.boardSize[1]['y'],\n        connectionsArraySize = (x - 1) * y + (y - 1) * x;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GameInstance).call(this, props));\n    _this.state = {\n      currentPlayer: _this.props.players[0],\n      firstConnector: 0,\n      secondConnector: 0,\n      //connectionsArray: Array(connectionsArraySize).fill({connection: [], isConnected: false}),\n      connectionsArray: [],\n      squareConditions: _this.generateSquareConditions(x, y),\n      squaresArray: [],\n      legalCombos: _this.generateLegalCombos(x, y)\n    };\n    return _this;\n  }\n\n  _createClass(GameInstance, [{\n    key: \"generateSquareConditions\",\n    value: function generateSquareConditions(x, y) {\n      var tempArray = [];\n\n      for (var i = 1; i <= (x - 1) * (y - 1) + y; i++) {\n        if (i % x != 0 && i < x * y - x) {\n          tempArray.push([[i, i + 1], [i + x, i + 1 + x], [i, i + x], [i + 1, i + 1 + x]]);\n        }\n      }\n\n      return tempArray;\n    }\n  }, {\n    key: \"generateLegalCombos\",\n    value: function generateLegalCombos(x, y) {\n      var tempArray = [];\n\n      for (var i = 1; i <= x * y; i++) {\n        if (i == 1) {\n          //if isTopLeftCorner\n          tempArray.push([i, i + 1]);\n          tempArray.push([i, i + x]);\n        } else if (i == x) {\n          //if isTopRightCorner\n          tempArray.push([i, i - 1]);\n          tempArray.push([i, i + x]);\n        } else if (i == x * y - x + 1) {\n          //if isBottomLeftCorner\n          tempArray.push([i, i - x]);\n          tempArray.push([i, i + 1]);\n        } else if (i == x * y) {\n          //if isBottomRightCorner\n          tempArray.push([i, i - 1]);\n          tempArray.push([i, i - x]);\n        } else if (i > 1 && i < x) {\n          //if isTopEdge\n          tempArray.push([i, i - 1]);\n          tempArray.push([i, i + x]);\n          tempArray.push([i, i + 1]);\n        } else if (i > x * y - x + 1 && i < x * y) {\n          //if isBottomEdge\n          tempArray.push([i, i - 1]);\n          tempArray.push([i, i - x]);\n          tempArray.push([i, i + 1]);\n        } else if ((i - 1) % x == 0 && i > 1 && i < x * y - x) {\n          //if isLeftEdge\n          tempArray.push([i, i - x]);\n          tempArray.push([i, i + 1]);\n          tempArray.push([i, i + x]);\n        } else if (i % x == 0 && i > x && i < x * y - 1) {\n          //if isRightEdge\n          tempArray.push([i, i - x]);\n          tempArray.push([i, i - 1]);\n          tempArray.push([i, i + x]);\n        } else {\n          //is central\n          tempArray.push([i, i - x]);\n          tempArray.push([i, i - 1]);\n          tempArray.push([i, i + x]);\n          tempArray.push([i, i + 1]);\n        }\n      }\n\n      return tempArray;\n    }\n  }, {\n    key: \"generateSquares\",\n    value: function generateSquares() {\n      var _this2 = this;\n\n      //checks connections array and update state as to squares\n      var squareConditions = this.state.squareConditions.slice(),\n          connectionsArray = this.state.connectionsArray.slice();\n      var squaresArray = this.state.squaresArray.slice(); //let tempArray = [];\n\n      for (var i = 0; i < squareConditions.length; i++) {\n        //A=false; B=false; C=false; D=false;\n        //sA=false; sB=false; sC=false; sD=false;\n        var A = false,\n            B = false,\n            C = false,\n            D = false;\n        var sA = false,\n            sB = false,\n            sC = false,\n            sD = false;\n        var tempArray = squareConditions[i];\n\n        var _squareConditions$i = _slicedToArray(squareConditions[i], 4),\n            a = _squareConditions$i[0],\n            b = _squareConditions$i[1],\n            c = _squareConditions$i[2],\n            d = _squareConditions$i[3];\n\n        for (var j = 0; j < connectionsArray.length; j++) {\n          if (connectionsArray[j][0] == a[0] && connectionsArray[j][1] == a[1]) {\n            A = true;\n          } else if (connectionsArray[j][0] == b[0] && connectionsArray[j][1] == b[1]) {\n            B = true;\n          } else if (connectionsArray[j][0] == c[0] && connectionsArray[j][1] == c[1]) {\n            C = true;\n          } else if (connectionsArray[j][0] == d[0] && connectionsArray[j][1] == d[1]) {\n            D = true;\n          }\n        }\n\n        for (var l = 0; l < squaresArray.length; l++) {\n          for (var k = 0; k < squaresArray[l]['square'].length; k++) {\n            //squaresArray[l]['square'] contains the 4 elements of \n            //squaresArray[l]['square'][k] contains the [x,y] to check against squareConditions[i]\n            if (squaresArray[l]['square'][k][0] == a[0] && squaresArray[l]['square'][k][1] == a[1]) {\n              sA = true;\n            } else if (squaresArray[l]['square'][k][0] == b[0] && squaresArray[l]['square'][k][1] == b[1]) {\n              sB = true;\n            } else if (squaresArray[l]['square'][k][0] == c[0] && squaresArray[l]['square'][k][1] == c[1]) {\n              sC = true;\n            } else if (squaresArray[l]['square'][k][0] == d[0] && squaresArray[l]['square'][k][1] == d[1]) {\n              sD = true;\n            }\n          }\n        }\n\n        if (A && B && C && D && !(sA && sB && sC && sD)) {\n          //i.e., if (connectionsArray contains all of the elements of a single squareCondition)\n          //have to check if squaresArray contains squareConditions[i]\n          squaresArray.push({\n            square: tempArray,\n            player: this.state.currentPlayer['username'],\n            color: this.state.currentPlayer['color']\n          });\n          this.setState({\n            squaresArray: squaresArray\n          }, function () {\n            //alert(\"yep\"); \n            return;\n          });\n        } else if (A && B && C && D) {//only change player if we didn't find a square\n        }\n      }\n\n      if (squaresArray.length == this.state.squaresArray.length) {\n        this.setState({\n          currentPlayer: this.state.currentPlayer == this.props.players[0] ? this.props.players[1] : this.props.players[0]\n        }, function () {\n          return;\n        });\n      }\n\n      this.setState({}, function () {\n        _this2.checkEndGame();\n\n        return;\n      });\n      return;\n    }\n  }, {\n    key: \"checkEndGame\",\n    value: function checkEndGame() {\n      var squaresArray = this.state.squaresArray.slice();\n      var x = this.props.boardSize[0]['x'];\n      var y = this.props.boardSize[1]['y'];\n\n      if (squaresArray.length == (x - 1) * (y - 1)) {\n        alert(\"end of game\");\n        return;\n      }\n\n      return;\n    }\n  }, {\n    key: \"connectTwo\",\n    value: function connectTwo(a, b) {\n      var _this3 = this;\n\n      var testArray = [a, b],\n          legalcombos = this.state.legalCombos;\n\n      var _loop = function _loop(i) {\n        var _legalcombos$i = _slicedToArray(legalcombos[i], 2),\n            x = _legalcombos$i[0],\n            y = _legalcombos$i[1];\n\n        if (testArray[0] === x && testArray[1] === y || testArray[1] === x && testArray[0] === y) {\n          var tempArray = _this3.state.connectionsArray.slice(); //has it already been connected?\n\n\n          var found = tempArray.find(function (n) {\n            return n[0] == [x, y][0] && n[1] == [x, y][1];\n          });\n\n          if (!!found == true) {\n            alert(\"invalid selection\");\n            return {\n              v: void 0\n            };\n          } //has its inverse been connecter?\n\n\n          found = tempArray.find(function (n) {\n            return n[0] == [x, y][1] && n[1] == [x, y][0];\n          });\n\n          if (!!found == true) {\n            alert(\"invalid selection\");\n            return {\n              v: void 0\n            };\n          } //good to go\n\n\n          tempArray.push([x, y]);\n\n          _this3.setState({\n            connectionsArray: tempArray\n          }, function () {\n            _this3.generateSquares(); //this.checkEndGame();\n\n\n            return;\n          });\n\n          return {\n            v: void 0\n          };\n        }\n      };\n\n      for (var i = 0; i < legalcombos.length; i++) {\n        var _ret = _loop(i);\n\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n\n      alert(\"invalid selection\");\n      this.setState(function (state, props) {\n        return {\n          firstConnector: state.firstConnector * 0,\n          secondConnector: state.secondConnector * 0\n        };\n      });\n      return;\n    }\n  }, {\n    key: \"clickHandler\",\n    value: function clickHandler(i) {\n      var _this4 = this;\n\n      if (!this.state.firstConnector && !this.state.secondConnector) {\n        this.setState(function (state, props) {\n          return {\n            firstConnector: state.firstConnector + i\n          };\n        });\n      } else if (!!this.state.firstConnector && !this.state.secondConnector) {\n        this.setState(function (state, props) {\n          return {\n            secondConnector: state.secondConnector + i\n          };\n        }, function () {\n          _this4.connectTwo(_this4.state.firstConnector, _this4.state.secondConnector);\n        });\n      } else if (!!this.state.firstConnector && !!this.state.secondConnector) {\n        this.setState(function (state, props) {\n          return {\n            firstConnector: state.firstConnector * 0 + i,\n            secondConnector: state.secondConnector * 0\n          };\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        className: \"game-instance\"\n      }, React.createElement(Board, {\n        clickHandler: function clickHandler(i) {\n          _this5.clickHandler(i);\n        },\n        x: this.props.boardSize[0]['x'],\n        y: this.props.boardSize[1]['y'],\n        connectionsArray: this.state.connectionsArray,\n        currentPlayer: this.state.currentPlayer,\n        playerOne: this.props.players[0],\n        playerTwo: this.props.players[1],\n        squaresArray: this.state.squaresArray\n      }));\n    }\n  }]);\n\n  return GameInstance;\n}(React.Component);\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Board, _React$Component3);\n\n  function Board() {\n    _classCallCheck(this, Board);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Board).apply(this, arguments));\n  }\n\n  _createClass(Board, [{\n    key: \"renderBoard\",\n    value: function renderBoard(x, y) {\n      var _this6 = this;\n\n      var xArr = [],\n          yArr = [],\n          xy = [];\n\n      for (var i = 0; i < x; i++) {\n        xArr.push(i);\n      }\n\n      ;\n\n      for (var j = 0; j < y; j++) {\n        yArr.push(j);\n      }\n\n      ;\n\n      for (var l = 1; l <= x * y; l++) {\n        xy.push(l);\n      }\n\n      var iterator = xy.values();\n      return React.createElement(\"div\", null, yArr.map(function (y) {\n        return React.createElement(\"tr\", null, xArr.map(function (x) {\n          return React.createElement(\"td\", null, _this6.renderConnector(iterator.next().value));\n        }));\n      }));\n    }\n  }, {\n    key: \"renderConnector\",\n    value: function renderConnector(i) {\n      var _this7 = this;\n\n      var connectorId = \"connector\".concat(i);\n      return React.createElement(Connector, {\n        key: i,\n        id: connectorId,\n        clickHandler: function clickHandler() {\n          return _this7.props.clickHandler(i);\n        }\n      });\n    }\n  }, {\n    key: \"calculateScore\",\n    value: function calculateScore() {\n      var playerOneScore = 0,\n          playerTwoScore = 0;\n\n      for (var i = 0; i < this.props.squaresArray.length; i++) {\n        if (this.props.squaresArray[i]['player'] == this.props.playerOne['username']) {\n          playerOneScore++;\n        }\n\n        if (this.props.squaresArray[i]['player'] == this.props.playerTwo['username']) {\n          playerTwoScore++;\n        }\n      }\n\n      return React.createElement(\"div\", null, this.props.playerOne['username'], \"'s score: \", playerOneScore, React.createElement(\"br\", null), this.props.playerTwo['username'], \"'s score: \", playerTwoScore);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"absolute-center\"\n      }, React.createElement(\"div\", {\n        className: \"game-board\"\n      }, this.renderBoard(this.props.x, this.props.y)), React.createElement(\"div\", {\n        className: \"game-board-connections\"\n      }, React.createElement(BoardConnections, {\n        connectionsArray: this.props.connectionsArray\n      })), React.createElement(\"div\", {\n        className: \"square-connections\"\n      }, React.createElement(SquareConnections, {\n        squaresArray: this.props.squaresArray,\n        playerColor: this.props.currentPlayer['color']\n      })), React.createElement(\"div\", {\n        className: \"game-status\"\n      }, \"It is \", this.props.currentPlayer['username'], \"'s turn!\", React.createElement(\"br\", null), React.createElement(\"br\", null), \"The current score is: \", this.calculateScore()));\n    }\n  }]);\n\n  return Board;\n}(React.Component);\n\nvar SquareConnections =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(SquareConnections, _React$Component4);\n\n  function SquareConnections() {\n    _classCallCheck(this, SquareConnections);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SquareConnections).apply(this, arguments));\n  }\n\n  _createClass(SquareConnections, [{\n    key: \"renderSquares\",\n    value: function renderSquares() {\n      var _this8 = this;\n\n      var tempArray = [];\n\n      for (var i = 0; i < this.props.squaresArray.length; i++) {\n        tempArray.push(i);\n      }\n\n      return React.createElement(\"div\", null, tempArray.map(function (i) {\n        return React.createElement(Square, {\n          color: _this8.props.squaresArray[i]['color'],\n          connectorA: _this8.props.squaresArray[i]['square'][0][0],\n          connectorB: _this8.props.squaresArray[i]['square'][1][1],\n          connectorC: _this8.props.squaresArray[i]['square'][0][1],\n          connectorD: _this8.props.squaresArray[i]['square'][1][0]\n        });\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, this.renderSquares());\n    }\n  }]);\n\n  return SquareConnections;\n}(React.Component);\n\nvar BoardConnections =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(BoardConnections, _React$Component5);\n\n  function BoardConnections() {\n    _classCallCheck(this, BoardConnections);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BoardConnections).apply(this, arguments));\n  }\n\n  _createClass(BoardConnections, [{\n    key: \"renderConnections\",\n    value: function renderConnections() {\n      var _this9 = this;\n\n      var tempArray = [];\n\n      for (var i = 0; i < this.props.connectionsArray.length; i++) {\n        tempArray.push(i);\n      }\n\n      ;\n      return React.createElement(\"div\", null, tempArray.map(function (i) {\n        return React.createElement(Connection, {\n          connectorA: _this9.props.connectionsArray[i][0],\n          connectorB: _this9.props.connectionsArray[i][1]\n        });\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, this.renderConnections());\n    }\n  }]);\n\n  return BoardConnections;\n}(React.Component);\n\nvar Connector =\n/*#__PURE__*/\nfunction (_React$Component6) {\n  _inherits(Connector, _React$Component6);\n\n  function Connector() {\n    _classCallCheck(this, Connector);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Connector).apply(this, arguments));\n  }\n\n  _createClass(Connector, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"button\", {\n        className: this.props.id,\n        key: this.props.key,\n        onClick: this.props.clickHandler\n      }, this.props.key);\n    }\n  }]);\n\n  return Connector;\n}(React.Component);\n\nvar Connection =\n/*#__PURE__*/\nfunction (_React$Component7) {\n  _inherits(Connection, _React$Component7);\n\n  function Connection() {\n    _classCallCheck(this, Connection);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Connection).apply(this, arguments));\n  }\n\n  _createClass(Connection, [{\n    key: \"render\",\n    value: function render() {\n      var connectorA = \"connector\".concat(this.props.connectorA),\n          connectorB = \"connector\".concat(this.props.connectorB);\n      return React.createElement(LineTo, {\n        from: connectorA,\n        to: connectorB,\n        borderWidth: 2,\n        borderColor: \"black\"\n      });\n    }\n  }]);\n\n  return Connection;\n}(React.Component);\n\nvar Square =\n/*#__PURE__*/\nfunction (_React$Component8) {\n  _inherits(Square, _React$Component8);\n\n  function Square() {\n    _classCallCheck(this, Square);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Square).apply(this, arguments));\n  }\n\n  _createClass(Square, [{\n    key: \"render\",\n    value: function render() {\n      var connectorA = \"connector\".concat(this.props.connectorA),\n          connectorB = \"connector\".concat(this.props.connectorB),\n          connectorC = \"connector\".concat(this.props.connectorC),\n          connectorD = \"connector\".concat(this.props.connectorD);\n      return React.createElement(\"div\", null, React.createElement(LineTo, {\n        from: connectorA,\n        to: connectorB,\n        borderColor: this.props.color,\n        borderWidth: 3\n      }), React.createElement(LineTo, {\n        from: connectorC,\n        to: connectorD,\n        borderColor: this.props.color,\n        borderWidth: 3\n      }), React.createElement(LineTo, {\n        from: connectorA,\n        to: connectorC,\n        borderColor: this.props.color,\n        borderWidth: 3\n      }), React.createElement(LineTo, {\n        from: connectorA,\n        to: connectorD,\n        borderColor: this.props.color,\n        borderWidth: 3\n      }), React.createElement(LineTo, {\n        from: connectorD,\n        to: connectorB,\n        borderColor: this.props.color,\n        borderWidth: 3\n      }), React.createElement(LineTo, {\n        from: connectorC,\n        to: connectorB,\n        borderColor: this.props.color,\n        borderWidth: 3\n      }));\n    }\n  }]);\n\n  return Square;\n}(React.Component);\n\nexport default Game;","map":{"version":3,"sources":["/home/jbarreto/Documents/Projects/lepipette/Game.js"],"names":["LineTo","Game","username","color","x","y","React","Component","GameInstance","props","boardSize","connectionsArraySize","state","currentPlayer","players","firstConnector","secondConnector","connectionsArray","squareConditions","generateSquareConditions","squaresArray","legalCombos","generateLegalCombos","tempArray","i","push","slice","length","A","B","C","D","sA","sB","sC","sD","a","b","c","d","j","l","k","square","player","setState","checkEndGame","alert","testArray","legalcombos","found","find","n","generateSquares","connectTwo","clickHandler","Board","xArr","yArr","xy","iterator","values","map","renderConnector","next","value","connectorId","playerOneScore","playerTwoScore","playerOne","playerTwo","renderBoard","calculateScore","SquareConnections","renderSquares","BoardConnections","renderConnections","Connector","id","key","Connection","connectorA","connectorB","Square","connectorC","connectorD"],"mappings":"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","sourcesContent":["import LineTo from 'react-lineto';\n\nclass Game extends React.Component {\n    render () { return (\n        <GameInstance players={[{username: \"timmy\", color: \"red\"}, {username: \"bobby\", color: \"blue\"}]} boardSize={[{x: 4}, {y: 4}]}/>\n    );}\n}\nclass GameInstance extends React.Component {\n    constructor(props) {\n        let x = props.boardSize[0]['x'],\n            y = props.boardSize[1]['y'],\n            connectionsArraySize = ((x-1)*y)+((y-1)*x);\n\n        super(props);\n        this.state = {\n            currentPlayer: this.props.players[0],\n            firstConnector: 0,\n            secondConnector: 0,\n            //connectionsArray: Array(connectionsArraySize).fill({connection: [], isConnected: false}),\n            connectionsArray: [],\n            squareConditions: this.generateSquareConditions(x, y),\n            squaresArray: [],\n            legalCombos: this.generateLegalCombos(x, y)\n        };\n    }\n\n    generateSquareConditions(x,y) {\n        let tempArray = [];\n\n        for(let i=1; i<=((x-1)*(y-1))+y; i++){\n            if(i%x!=0 && i<x*y-x){\n                tempArray.push([[i, i+1],[i+x, i+1+x],[i, i+x],[i+1, i+1+x]]);\n            }\n        }\n\n        return tempArray;\n    }\n    generateLegalCombos(x, y) {\n        let tempArray = [];\n\n        for (let i=1; i<=x*y; i++) {\n            if(i == 1) { //if isTopLeftCorner\n                tempArray.push([i, i+1]);\n                tempArray.push([i, i+x]);\n            }else if(i == x) { //if isTopRightCorner\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i+x]);\n            }else if(i == (((x*y)-x)+1)) { //if isBottomLeftCorner\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i+1]);\n            }else if(i == x*y) { //if isBottomRightCorner\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i-x]);\n            }else if(i > 1 && i < x) { //if isTopEdge\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i+x]);\n                tempArray.push([i, i+1]);\n            }else if(i > (((x*y)-x)+1) && i < x*y) { //if isBottomEdge\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i+1]);\n            }else if((i-1)%x==0 && i>1 && i<(x*y)-x) { //if isLeftEdge\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i+1]);\n                tempArray.push([i, i+x]);\n            }else if(i%x==0 && i>x && i<(x*y)-1) { //if isRightEdge\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i+x]);\n            }else {//is central\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i+x]);\n                tempArray.push([i, i+1]);\n            }        \n        } \n        return tempArray;        \n    }\n    generateSquares() {\n        //checks connections array and update state as to squares\n        let squareConditions = this.state.squareConditions.slice(),\n            connectionsArray = this.state.connectionsArray.slice();\n        let squaresArray = this.state.squaresArray.slice();\n        \n        //let tempArray = [];\n        \n        for (let i=0; i<squareConditions.length; i++) {\n            //A=false; B=false; C=false; D=false;\n            //sA=false; sB=false; sC=false; sD=false;\n            let A=false, B=false, C=false, D=false;\n            let sA=false, sB=false, sC=false, sD=false;\n\n            let tempArray = squareConditions[i];\n            const [a, b, c, d] = squareConditions[i];\n\n            for(let j=0; j<connectionsArray.length; j++) {\n                if (connectionsArray[j][0]==a[0] && connectionsArray[j][1]==a[1]) {\n                    A = true;\n                } else if (connectionsArray[j][0]==b[0] && connectionsArray[j][1]==b[1]) {\n                    B = true;\n                } else if (connectionsArray[j][0]==c[0] && connectionsArray[j][1]==c[1]) {\n                    C = true;\n                } else if (connectionsArray[j][0]==d[0] && connectionsArray[j][1]==d[1]) {\n                    D = true;\n                }\n            }\n\n            for(let l=0; l<squaresArray.length; l++) {\n                for (let k=0; k<squaresArray[l]['square'].length; k++) {\n                    //squaresArray[l]['square'] contains the 4 elements of \n                    //squaresArray[l]['square'][k] contains the [x,y] to check against squareConditions[i]\n                    if(squaresArray[l]['square'][k][0]==a[0] && squaresArray[l]['square'][k][1]==a[1]) {\n                        sA = true;\n                    } else if(squaresArray[l]['square'][k][0]==b[0] && squaresArray[l]['square'][k][1]==b[1]) {\n                        sB = true;\n                    } else if(squaresArray[l]['square'][k][0]==c[0] && squaresArray[l]['square'][k][1]==c[1]) {\n                        sC = true;\n                    } else if(squaresArray[l]['square'][k][0]==d[0] && squaresArray[l]['square'][k][1]==d[1]) {\n                        sD = true;\n                    }\n                }\n            }\n            if ((A && B && C && D) && !(sA && sB && sC && sD)) { //i.e., if (connectionsArray contains all of the elements of a single squareCondition)\n                //have to check if squaresArray contains squareConditions[i]\n                squaresArray.push({square: tempArray, player: this.state.currentPlayer['username'], color: this.state.currentPlayer['color']});\n                this.setState({squaresArray: squaresArray}, () => {\n                    //alert(\"yep\"); \n                    return;\n                });\n                \n            } else if ((A && B && C && D)) {//only change player if we didn't find a square\n                \n            }\n\n\n        }\n        if (squaresArray.length == this.state.squaresArray.length) {\n            this.setState({currentPlayer: (this.state.currentPlayer==this.props.players[0] ? this.props.players[1] : this.props.players[0]) }, () => {\n                return;\n            });\n        }\n        this.setState({}, () => {\n            this.checkEndGame(); \n            return; \n        })\n\n        \n\n        \n        return;\n    }\n\n    checkEndGame(){\n        let squaresArray = this.state.squaresArray.slice();\n        let x = this.props.boardSize[0]['x'];\n        let y = this.props.boardSize[1]['y']\n        if (squaresArray.length == (x-1)*(y-1)) {\n            alert(\"end of game\");\n            return;\n        }\n        return;\n    }\n\n    connectTwo(a, b) {\n        let testArray = [a, b],\n            legalcombos = this.state.legalCombos;\n\n        for (let i=0; i<legalcombos.length; i++) {\n            const [x, y] = legalcombos[i];\n            if ((testArray[0] === x && testArray[1] === y) || (testArray[1] === x && testArray[0] === y)) {\n                \n                let tempArray = this.state.connectionsArray.slice();\n                //has it already been connected?\n                let found = tempArray.find(n => (n[0] == [x,y][0] && n[1] == [x,y][1]));\n                if (!!found == true){\n                    alert(\"invalid selection\");\n                    return;\n                }\n                //has its inverse been connecter?\n                found = tempArray.find(n => (n[0] == [x,y][1] && n[1] == [x,y][0]));\n                if (!!found == true){\n                    alert(\"invalid selection\");\n                    return;\n                }\n                //good to go\n                tempArray.push([x,y]);\n\n                this.setState({connectionsArray: tempArray}, () => {\n                    this.generateSquares();\n                    //this.checkEndGame();\n                    return;\n                });\n                \n                return;\n            } \n        \n        }\n        alert(\"invalid selection\");\n        this.setState((state, props) => {\n            return {firstConnector: state.firstConnector * 0, secondConnector: state.secondConnector * 0}\n        });\n        return;\n    }\n    clickHandler(i){\n        if (!this.state.firstConnector && !this.state.secondConnector) {\n            this.setState((state, props) => {\n                return {firstConnector: state.firstConnector + i}\n            });\n        } else if (!!this.state.firstConnector && !this.state.secondConnector) {\n            this.setState((state, props) => {\n                return {secondConnector: state.secondConnector + i}\n            }, () => {\n                this.connectTwo(this.state.firstConnector, this.state.secondConnector);\n            });\n        } else if (!!this.state.firstConnector && !!this.state.secondConnector) {\n            this.setState((state, props) => {\n                return {firstConnector: (state.firstConnector * 0) + i, secondConnector: state.secondConnector * 0}\n            });      \n        }\n        \n    }\n\n    render () {return (\n        <div className=\"game-instance\">\n            <Board clickHandler={(i) => {this.clickHandler(i)}} x={this.props.boardSize[0]['x']} y={this.props.boardSize[1]['y']} connectionsArray={this.state.connectionsArray} currentPlayer={this.state.currentPlayer} playerOne={this.props.players[0]} playerTwo={this.props.players[1]} squaresArray={this.state.squaresArray}/>\n            \n        </div>\n    );}\n\n}\nclass Board extends React.Component {\n    renderBoard(x, y) {\n        let xArr = [], \n            yArr = [],\n            xy = [];\n        \n        for (let i=0; i<x; i++) {\n            xArr.push(i);\n        };\n        for (let j=0; j<y; j++) {\n            yArr.push(j);      \n        };\n        for (let l=1; l<=x*y; l++) {\n            xy.push(l);\n        }\n        \n        let iterator = xy.values();\n\n        return(<div>\n            {yArr.map(y => <tr>{\n                xArr.map((x) => \n                <td>{this.renderConnector(iterator.next().value)}</td>\n            )}</tr>)}\n            </div>);\n    }\n\n    renderConnector(i) {\n        let connectorId = `connector${i}`\n        return(\n        <Connector key={i} id={connectorId} clickHandler={() => this.props.clickHandler(i)}/>\n    );}\n\n    calculateScore() {\n        let playerOneScore = 0,\n            playerTwoScore = 0;\n        for (let i=0; i<this.props.squaresArray.length; i++) {\n            if (this.props.squaresArray[i]['player'] == this.props.playerOne['username']) {\n                playerOneScore++;\n            }\n            if (this.props.squaresArray[i]['player'] == this.props.playerTwo['username']) {\n                playerTwoScore++;\n            }\n        }\n        return (\n            <div>\n                {this.props.playerOne['username']}'s score: {playerOneScore}<br></br>\n                {this.props.playerTwo['username']}'s score: {playerTwoScore}\n            </div>\n        );\n    }\n\n    render() {return (\n        <div className=\"absolute-center\">\n            <div className=\"game-board\">\n                {this.renderBoard(this.props.x,this.props.y)}\n            </div>\n            <div className=\"game-board-connections\">\n                <BoardConnections connectionsArray={this.props.connectionsArray} />\n            </div>\n            <div className=\"square-connections\">\n                <SquareConnections squaresArray={this.props.squaresArray} playerColor={this.props.currentPlayer['color']}/>\n            </div>\n            <div className=\"game-status\">\n                It is {this.props.currentPlayer['username']}'s turn!<br></br><br></br>\n                The current score is: {this.calculateScore()}\n            </div>\n        </div>\n    );}\n}\nclass SquareConnections extends React.Component {\n    renderSquares() {\n        let tempArray = [];\n\n        for (let i=0; i<this.props.squaresArray.length; i++) {\n            tempArray.push(i);\n        }\n\n        return(<div>\n            {tempArray.map((i) => {\n                return <Square color={this.props.squaresArray[i]['color']} connectorA={this.props.squaresArray[i]['square'][0][0]} connectorB={this.props.squaresArray[i]['square'][1][1]} connectorC={this.props.squaresArray[i]['square'][0][1]} connectorD={this.props.squaresArray[i]['square'][1][0]} />;\n            })}\n        </div>);\n    }\n    render() {\n        return (\n            <div>{this.renderSquares()}</div>\n        );\n    }\n}\nclass BoardConnections extends React.Component {\n    renderConnections () {\n        let tempArray = [];\n\n        for (let i=0; i<this.props.connectionsArray.length; i++) {\n             tempArray.push(i);\n        };\n        return (<div>{tempArray.map((i) => {\n            return <Connection connectorA={this.props.connectionsArray[i][0]} connectorB={this.props.connectionsArray[i][1]} />;\n        })}</div>);\n        \n    }\n    render () {\n        return (\n            <div>{this.renderConnections()}</div>\n        );\n    }\n}\nclass Connector extends React.Component {\n    render() {\n        return (\n        <button className={this.props.id} key={this.props.key} onClick={this.props.clickHandler}>{this.props.key}</button>\n    );}\n}\nclass Connection extends React.Component {\n    render() {\n        let connectorA = `connector${this.props.connectorA}`,\n            connectorB = `connector${this.props.connectorB}`;\n    \n        return (\n            <LineTo from={connectorA} to={connectorB} borderWidth={2} borderColor=\"black\"/>\n        );\n        \n    }\n}\nclass Square extends React.Component {\n    render() {\n        let connectorA = `connector${this.props.connectorA}`,\n            connectorB = `connector${this.props.connectorB}`,\n            connectorC = `connector${this.props.connectorC}`,\n            connectorD = `connector${this.props.connectorD}`;\n        return (<div>\n            <LineTo from={connectorA} to={connectorB} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorC} to={connectorD} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorA} to={connectorC} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorA} to={connectorD} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorD} to={connectorB} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorC} to={connectorB} borderColor={this.props.color} borderWidth={3}/>\n        </div>);\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}