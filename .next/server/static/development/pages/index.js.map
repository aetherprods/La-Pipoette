{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Game/Board.js","webpack:///./components/Game/BoardConnections.js","webpack:///./components/Game/Connection.js","webpack:///./components/Game/Connector.js","webpack:///./components/Game/GameInstance.js","webpack:///./components/Game/Square.js","webpack:///./components/Game/SquareConnections.js","webpack:///./components/Game/index.js","webpack:///./components/Lobby/ActiveUsers.js","webpack:///./components/Lobby/Chat.js","webpack:///./components/Lobby/index.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/keys.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/parse-int.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js","webpack:///./pages/index.js","webpack:///external \"axios\"","webpack:///external \"core-js/library/fn/json/stringify\"","webpack:///external \"core-js/library/fn/object/define-property\"","webpack:///external \"core-js/library/fn/object/keys\"","webpack:///external \"core-js/library/fn/parse-int\"","webpack:///external \"core-js/library/fn/promise\"","webpack:///external \"next/dynamic\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"react-lineto\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"static/development/pages/index.js\": 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// require() chunk loading for javascript\n\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] !== 0) {\n \t\t\tvar chunk = require(\"../../../\" + ({}[chunkId]||chunkId) + \".js\");\n \t\t\tvar moreModules = chunk.modules, chunkIds = chunk.ids;\n \t\t\tfor(var moduleId in moreModules) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t\tfor(var i = 0; i < chunkIds.length; i++)\n \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import Connector from './Connector.js';\nimport BoardConnections from './BoardConnections.js';\nimport SquareConnections from './SquareConnections.js';\n\nclass Board extends React.Component {\n    renderBoard(x, y) {\n        let xArr = [], \n            yArr = [],\n            xy = [];\n        \n        for (let i=0; i<x; i++) {\n            xArr.push(i);\n        };\n        for (let j=0; j<y; j++) {\n            yArr.push(j);      \n        };\n        for (let l=1; l<=x*y; l++) {\n            xy.push(l);\n        }\n        \n        let iterator = xy.values();\n\n        return(<div>\n            {yArr.map(y => <tr key={y}>{\n                xArr.map((x) => \n                <td key={iterator.value}>{this.renderConnector(iterator.next().value)}</td>\n            )}</tr>)}\n            </div>);\n    }\n\n    renderConnector(i) {\n        let connectorId = `connector${i}`\n        return(\n        <Connector id={connectorId} clickHandler={() => this.props.clickHandler(i)}/>\n    );}\n\n    calculateScore() {\n        let playerOneScore = 0,\n            playerTwoScore = 0;\n        for (let i=0; i<this.props.squaresArray.length; i++) {\n            if (this.props.squaresArray[i]['player'] == this.props.playerOne.name) {\n                playerOneScore++;\n            }\n            if (this.props.squaresArray[i]['player'] == this.props.playerTwo.name) {\n                playerTwoScore++;\n            }\n        }\n\n        if (this.props.gameOver == true) {\n            \n            if(playerOneScore>playerTwoScore){\n                return (\n                    <div>\n                        <button onClick={this.props.triggerGameRestart}>End Game</button><br></br>\n                        {this.props.playerOne.name} has won!<br></br>\n                        {this.props.playerOne.name}: {playerOneScore}<br></br>\n                        {this.props.playerTwo.name}: {playerTwoScore}\n                    </div>\n                );\n            } else if (playerTwoScore>playerOneScore) {\n                return (\n                    <div>\n                        <button onClick={this.props.triggerGameRestart}>End Game</button><br></br>\n                        {this.props.playerTwo.name} has won!<br></br>\n                        {this.props.playerTwo.name}: {playerTwoScore}<br></br>\n                        {this.props.playerOne.name}: {playerOneScore}\n                    </div>\n                );\n            } else if (playerOneScore==playerTwoScore) {\n                return (\n                    <div>\n                        <button onClick={this.props.triggerGameRestart}>End Game</button><br></br>\n                        It's a tie!<br></br>\n                        {this.props.playerOne.name}: {playerOneScore}<br></br>\n                        {this.props.playerTwo.name}: {playerTwoScore}\n                    </div>\n                );\n                \n            };\n\n        };\n\n\n        return (\n            <div>\n                It is {this.props.currentPlayer.userID==this.props.playerOne.userID ? this.props.playerOne.name : this.props.playerTwo.name }'s turn!<br></br><br></br>\n                The current score is:<br></br>\n                {this.props.playerOne.name}'s score: {playerOneScore}<br></br>\n                {this.props.playerTwo.name}'s score: {playerTwoScore}\n            </div>\n        );\n    }\n\n    render() {return (\n        <div >\n            <div className=\"game-board absolute-center\">\n                {this.renderBoard(this.props.x,this.props.y)}\n                {this.calculateScore()}\n            </div>\n            <div className=\"game-board-connections\">\n                <BoardConnections connectionsArray={this.props.connectionsArray} />\n            </div>\n            <div className=\"square-connections\">\n                <SquareConnections squaresArray={this.props.squaresArray} /* playerColor={this.props.currentPlayer['color']} *//>\n            </div>\n            <div className=\"game-status\">\n                \n            </div>\n        </div>\n    );}\n}\n\nexport default Board;","import Connection from './Connection.js';\n\nclass BoardConnections extends React.Component {\n    renderConnections () {\n        let tempArray = [];\n\n        for (let i=0; i<this.props.connectionsArray.length; i++) {\n             tempArray.push(i);\n        };\n        return (<div>{tempArray.map((i) => {\n            return <Connection connectorA={this.props.connectionsArray[i][0]} connectorB={this.props.connectionsArray[i][1]} />;\n        })}</div>);\n        \n    }\n    render () {\n        return (\n            <div>{this.renderConnections()}</div>\n        );\n    }\n}\n\nexport default BoardConnections;","import LineTo from 'react-lineto';\n\nclass Connection extends React.Component {\n    render() {\n        let connectorA = `connector${this.props.connectorA}`,\n            connectorB = `connector${this.props.connectorB}`;\n    \n        return (\n            <LineTo from={connectorA} to={connectorB} borderWidth={2} borderColor=\"black\"/>\n        );\n        \n    }\n}\n\nexport default Connection;","class Connector extends React.Component {\n    render() {\n        return (\n        <button className={this.props.id} onClick={this.props.clickHandler}></button>\n    );}\n}\n\nexport default Connector;","import axios from 'axios';\nimport Board from './Board.js';\n\nclass GameInstance extends React.Component {\n    constructor(props) {\n        super(props);\n\n        console.log(props.boardSize);\n\n        let x = parseInt(props.boardSize.x, 10),\n            y = parseInt(props.boardSize.y, 10),\n            connectionsArraySize = ((x-1)*y)+((y-1)*x);\n\n        this.state = {\n            gameOver: false,\n            currentPlayer: this.props.playerOne,\n            firstConnector: 0,\n            secondConnector: 0,\n            connectionsArray: [],\n            squareConditions: this.generateSquareConditions(x, y),\n            squaresArray: [],\n            legalCombos: this.generateLegalCombos(x, y)\n        };\n\n        this.gameMessage = this.gameMessage.bind(this);\n    }\n\n    gameMessage(event) {\n        let data = JSON.parse(event.data);\n\n        if (data.type == \"game-move\") {\n            this.setState({ connectionsArray: data.gameState });\n            this.generateSquares();\n        }\n\n        if (data.type == \"set-current-player\") {\n            this.setState({ currentPlayer: data.currentPlayer })\n        }\n    }\n\n    sendMove (connectionsArray) {\n        this.props.socket.send(JSON.stringify({ type:\"game-move\", gameID: this.props.gameID, gameState: connectionsArray }));\n        \n    }\n\n    componentDidMount () {\n        this.props.socket.addEventListener('message', this.gameMessage, true);\n    }\n\n    componentWillUnmount () {\n        this.props.socket.removeEventListener('message', this.gameMessage, true);\n    }\n\n    generateSquareConditions(x,y) {\n        let tempArray = [];\n\n        for(let i=1; i<=((x-1)*(y-1))+y; i++){\n            if(i%x!=0 && i<x*y-x){\n                tempArray.push([[i, i+1],[i+x, i+1+x],[i, i+x],[i+1, i+1+x]]);\n            }\n        }\n\n        return tempArray;\n    }\n    generateLegalCombos(x, y) {\n        let tempArray = [];\n\n        for (let i=1; i<=x*y; i++) {\n            if(i == 1) { //if isTopLeftCorner\n                tempArray.push([i, i+1]);\n                tempArray.push([i, i+x]);\n            }else if(i == x) { //if isTopRightCorner\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i+x]);\n            }else if(i == (((x*y)-x)+1)) { //if isBottomLeftCorner\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i+1]);\n            }else if(i == x*y) { //if isBottomRightCorner\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i-x]);\n            }else if(i > 1 && i < x) { //if isTopEdge\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i+x]);\n                tempArray.push([i, i+1]);\n            }else if(i > (((x*y)-x)+1) && i < x*y) { //if isBottomEdge\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i+1]);\n            }else if((i-1)%x==0 && i>1 && i<(x*y)-x) { //if isLeftEdge\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i+1]);\n                tempArray.push([i, i+x]);\n            }else if(i%x==0 && i>x && i<(x*y)-1) { //if isRightEdge\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i+x]);\n            }else {//is central\n                tempArray.push([i, i-x]);\n                tempArray.push([i, i-1]);\n                tempArray.push([i, i+x]);\n                tempArray.push([i, i+1]);\n            }        \n        } \n        return tempArray;        \n    }\n    generateSquares() {\n        //checks connections array and update state as to squares\n        let squareConditions = this.state.squareConditions.slice(),\n            connectionsArray = this.state.connectionsArray.slice(),\n            squaresArray = this.state.squaresArray.slice();\n        \n        \n        for (let i=0; i<squareConditions.length; i++) {\n            let A=false, B=false, C=false, D=false;\n            let sA=false, sB=false, sC=false, sD=false;\n\n            let tempArray = squareConditions[i];\n            const [a, b, c, d] = squareConditions[i];\n\n            for(let j=0; j<connectionsArray.length; j++) {\n                if (connectionsArray[j][0]==a[0] && connectionsArray[j][1]==a[1]) {\n                    A = true;\n                } else if (connectionsArray[j][0]==b[0] && connectionsArray[j][1]==b[1]) {\n                    B = true;\n                } else if (connectionsArray[j][0]==c[0] && connectionsArray[j][1]==c[1]) {\n                    C = true;\n                } else if (connectionsArray[j][0]==d[0] && connectionsArray[j][1]==d[1]) {\n                    D = true;\n                }\n            }\n\n            for(let l=0; l<squaresArray.length; l++) {\n                for (let k=0; k<squaresArray[l]['square'].length; k++) {\n                    //squaresArray[l]['square'] contains the 4 connections describing a square:\n                    //squaresArray[l]['square'][k] contains the [x,y] to check against squareConditions[i]\n                    if(squaresArray[l]['square'][k][0]==a[0] && squaresArray[l]['square'][k][1]==a[1]) {\n                        sA = true;\n                    } else if(squaresArray[l]['square'][k][0]==b[0] && squaresArray[l]['square'][k][1]==b[1]) {\n                        sB = true;\n                    } else if(squaresArray[l]['square'][k][0]==c[0] && squaresArray[l]['square'][k][1]==c[1]) {\n                        sC = true;\n                    } else if(squaresArray[l]['square'][k][0]==d[0] && squaresArray[l]['square'][k][1]==d[1]) {\n                        sD = true;\n                    }\n                }\n            }\n            if ((A && B && C && D) && !(sA && sB && sC && sD)) { //i.e., if (connectionsArray contains all of the elements of a single squareCondition)\n                \n                squaresArray.push({square: tempArray, player: this.state.currentPlayer['name'], color: this.state.currentPlayer['color']});\n                this.setState({squaresArray: squaresArray}, () => {\n                    /* this.opponentChannel.trigger('client-set-squares', squaresArray); */\n                    this.checkEndGame(); \n                    return;\n                });\n                \n            }\n\n        }\n        if (squaresArray.length == this.state.squaresArray.length) {\n            this.setState({currentPlayer: (this.state.currentPlayer==this.props.playerOne ? this.props.playerTwo : this.props.playerOne) }, () => {\n                /* this.opponentChannel.trigger('client-change-current-player', 'null'); */\n                return;\n            });\n        }\n\n               \n\n        \n        return;\n    }\n    checkEndGame(){\n        let squaresArray = this.state.squaresArray.slice();\n        let x = parseInt(this.props.boardSize.x, 10),\n            y = parseInt(this.props.boardSize.y, 10);\n\n        if (squaresArray.length == (x-1)*(y-1)) {\n\n            this.setState({ gameOver: true }, () => {});\n            /* this.opponentChannel.trigger('client-game-over', 'null'); */\n\n            return;\n        }\n        return;\n    }\n    \n    connectTwo(a, b) {\n        //is it my turn? if not, return\n        if (this.state.currentPlayer.userID!==this.props.self.userID) {\n            alert(\"it's not your turn!\");\n            return;\n        }\n        \n\n        let testArray = [a, b],\n            legalcombos = this.state.legalCombos;\n\n        for (let i=0; i<legalcombos.length; i++) {\n            const [x, y] = legalcombos[i];\n            if ((testArray[0] === x && testArray[1] === y) || (testArray[1] === x && testArray[0] === y)) {\n                \n                let tempArray = this.state.connectionsArray.slice();\n                //has it already been connected?\n                let found = tempArray.find(n => (n[0] == [x,y][0] && n[1] == [x,y][1]));\n                if (!!found == true){\n                    alert(\"invalid selection\");\n                    return;\n                }\n                //has its inverse been connecter?\n                found = tempArray.find(n => (n[0] == [x,y][1] && n[1] == [x,y][0]));\n                if (!!found == true){\n                    alert(\"invalid selection\");\n                    return;\n                }\n                //good to go\n                tempArray.push([x,y]);\n\n\n                this.setState({connectionsArray: tempArray}, () => {\n                    this.sendMove(tempArray);                    \n                    return;\n                });\n                \n                return;\n            } \n        \n        }\n        alert(\"invalid selection\");\n        this.setState((state, props) => {\n            return {firstConnector: state.firstConnector * 0, secondConnector: state.secondConnector * 0}\n        });\n        return;\n    }\n    clickHandler(i){\n        if (!this.state.firstConnector && !this.state.secondConnector) {\n            this.setState((state, props) => {\n                return {firstConnector: state.firstConnector + i}\n            });\n        } else if (!!this.state.firstConnector && !this.state.secondConnector) {\n            this.setState((state, props) => {\n                return {secondConnector: state.secondConnector + i}\n            }, () => {\n                this.connectTwo(this.state.firstConnector, this.state.secondConnector);\n            });\n        } else if (!!this.state.firstConnector && !!this.state.secondConnector) {\n            this.setState((state, props) => {\n                return {firstConnector: (state.firstConnector * 0) + i, secondConnector: state.secondConnector * 0}\n            });      \n        }\n        \n    }\n    triggerGameRestart () {\n        /* this.playerChannel.trigger('client-restart-game', 'null'); */\n        this.props.socket.send(JSON.stringify({ type:\"game-over\", player: this.props.self.userID }));\n    }\n\n    render () {\n\n        return (\n        <div className=\"game-instance\">\n            <Board clickHandler={(i) => {this.clickHandler(i)}} x={this.props.boardSize.x} y={this.props.boardSize.x} connectionsArray={this.state.connectionsArray} currentPlayer={this.state.currentPlayer} playerOne={this.props.playerOne} playerTwo={this.props.playerTwo} squaresArray={this.state.squaresArray} gameOver={this.state.gameOver} triggerGameRestart={() => {this.triggerGameRestart()}}/>\n            \n        </div>\n    );}\n\n}\n\nexport default GameInstance;","import LineTo from 'react-lineto';\n\nclass Square extends React.Component {\n    render() {\n        let connectorA = `connector${this.props.connectorA}`,\n            connectorB = `connector${this.props.connectorB}`,\n            connectorC = `connector${this.props.connectorC}`,\n            connectorD = `connector${this.props.connectorD}`;\n        return (<div>\n            <LineTo from={connectorA} to={connectorB} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorC} to={connectorD} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorA} to={connectorC} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorA} to={connectorD} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorD} to={connectorB} borderColor={this.props.color} borderWidth={3}/>\n            <LineTo from={connectorC} to={connectorB} borderColor={this.props.color} borderWidth={3}/>\n        </div>);\n    }\n}\n\nexport default Square;","import Square from './Square.js';\n\nclass SquareConnections extends React.Component {\n    renderSquares() {\n        let tempArray = [];\n\n        for (let i=0; i<this.props.squaresArray.length; i++) {\n            tempArray.push(i);\n        }\n\n        return(<div>\n            {tempArray.map((i) => {\n                return <Square color={this.props.squaresArray[i]['color']} connectorA={this.props.squaresArray[i]['square'][0][0]} connectorB={this.props.squaresArray[i]['square'][1][1]} connectorC={this.props.squaresArray[i]['square'][0][1]} connectorD={this.props.squaresArray[i]['square'][1][0]} />;\n            })}\n        </div>);\n    }\n    render() {\n        return (\n            <div>{this.renderSquares()}</div>\n        );\n    }\n}\n\nexport default SquareConnections;","import GameInstance from './GameInstance.js';\n\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerOne: this.props.playerOne, \n            playerTwo: this.props.playerTwo,\n            self: this.props.self,\n            boardSize: this.props.boardSize\n        };\n \n    }\n    render () { \n\n        return (\n            <GameInstance socket={this.props.socket} gameID={this.props.gameID} self={this.state.self} playerOne={this.state.playerOne} playerTwo={this.state.playerTwo} boardSize={this.state.boardSize} />\n        );\n    }\n}\n\nexport default Game;","import axios from 'axios';\nimport Game from '../Game/index.js';\n\nclass ActiveUsers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: [],\n            gameLink: false,\n            self: {},\n            playerOne: {},\n            playerTwo: {},\n            boardSize: {}\n        }\n\n\n        this.inviteFunction = this.inviteFunction.bind(this);\n        this.message = this.message.bind(this);        \n    }\n\n   \n\n    message(event) {\n        let data = JSON.parse(event.data);\n\n        if (data.type == 'users') {\n            this.setState({ users: data.users });\n        }\n\n        if (data.type == 'game-start') {\n            this.setState({ \n                gameLink: true,\n                gameID: data.game.gameID,\n                playerOne: data.game.playerOne,\n                playerTwo: data.game.playerTwo,\n                boardSize: data.game.boardSize\n            });\n        }\n\n        if (data.type == 'game-over') {\n            this.setState({ \n                gameLink: false,\n                gameID: null,\n                playerOne: {},\n                playerTwo: {},\n                boardSize: {}\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ self: this.props.self });\n        \n        this.props.socket.addEventListener('message', this.message, true);\n        this.props.socket.send(JSON.stringify({ type:\"get-users\" }));\n        \n    }\n    componentWillUnmount() {\n        this.props.socket.removeEventListener('message', this.message, true);\n        this.props.socket.close();\n    }\n\n    inviteFunction(data) {\n        let target = { userID: data.currentTarget.dataset.userid },\n            self = this.state.self;\n            \n        if (target.userID == self.userID) {\n            alert (\"you can't play yourself!\");\n            return;\n        };\n\n        if (this.state.gameLink) {\n            alert(\"you can't play while in game!\")\n            return;\n        };\n        \n\n        if (this.state.users[target.userID].inGame) {\n            alert(\"you can't play someone who's in a game!\");\n            return;\n        } else {\n            let xDone = false, yDone = false;\n\n            let x = prompt(\"Board width?\");\n            function checkX() {\n                if (x == null) {\n                    return false;\n                };\n                if (!(/^[0-9]+$/.test(x))) {        //could have used isNaN()\n                    x = prompt(\"Please only input numbers\");\n                    checkX();\n                };\n                if (x<2) {\n                    x = prompt(\"Please only input numbers greater than 1\");\n                    checkX();\n                };\n                if ((/^[0-9]+$/.test(x)) && x>1) {\n                    xDone = true;\n                };\n            };\n            checkX();\n\n            let y = prompt(\"Board height?\");\n            function checkY() {\n                if (y == null) {\n                    return false;\n                };\n                if (!(/^[0-9]+$/.test(y))) {\n                    y = prompt(\"Please only input numbers\");\n                    checkY();\n                };\n                if (y<2) {\n                    y = prompt(\"Please only input numbers greater than 1\");\n                    checkY();\n                };\n                if ((/^[0-9]+$/.test(y)) && y>1) {\n                    yDone = true;\n                };\n            };\n            checkY();\n\n\n\n            if (xDone && yDone) {\n                axios.post('/game_daemon', { playerOne: {userID: self.userID}, playerTwo: target, boardSize: {x: x, y: y} });\n            };\n        }\n    }\n\n\n    render () {\n        let users = this.state.users\n        let usersIter = Object.keys(this.state.users);\n        \n        let gameLink = this.state.gameLink;\n\n        return (<div>\n            <div>\n                {!!gameLink && <Game self={this.state.self} playerOne={this.state.playerOne} playerTwo={this.state.playerTwo} boardSize={this.state.boardSize} gameID={this.state.gameID} socket={this.props.socket} />}\n            </div>\n            <div>\n                \n                {usersIter.map((user, index) => <div key={index}><a href=\"#\" onClick={this.inviteFunction} data-userid={users[user].userID}>\n                    <User user={users[user].name}/>\n                </a></div>)}\n            </div>\n        </div>)\n\n    }\n};\n\nclass User extends React.Component {\n    render () {\n        return (<div>\n           {this.props.user}\n        </div>);\n    };\n};\n\n\n\n\n\nexport default ActiveUsers;","class Chat extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { messages: [] };\n        this.message = this.message.bind(this);\n    }\n\n    message(event) {\n      let that = this; \n\n      let data = JSON.parse(event.data);\n        if (data.type == \"message\") { \n          const messages = that.state.messages;\n          messages.push(data);\n          that.setState({ messages: messages }, () => {\n            document.getElementById(\"chat-box\").scrollTop = document.getElementById(\"chat-box\").scrollHeight;\n          });\n        }\n\n        if (data.type == \"history\") {\n          const messages = that.state.messages;\n          \n          for (let message in data.history) {\n            messages.push(data.history[message]);\n          }\n          that.setState({ messages: messages }, () => {\n            document.getElementById(\"chat-box\").scrollTop = document.getElementById(\"chat-box\").scrollHeight;\n          });\n        }\n    }\n\n    componentDidMount() {\n      let socket = this.props.socket;\n\n      socket.addEventListener('message', this.message, true);\n      socket.send(JSON.stringify({ type:\"get-chat-history\" }));\n    }\n\n    componentWillUnmount() {\n      this.props.socket.removeEventListener('message', this.message, true);\n    }\n\n    handleKeyUp = evt => {\n        const value = evt.target.value;\n        \n        if (evt.keyCode === 13 && !evt.shiftKey) {\n          const chat = { type: \"message\", userID: this.props.self.userID, message: value };\n          \n          evt.target.value = '';\n          this.props.socket.send(JSON.stringify(chat));\n        }\n      }\n\n    render() {\n      return (<div>\n        <div >\n          <h2>Welcome {this.props.self.name}!</h2>\n        </div>\n\n        <div className=\"chat-box\" id=\"chat-box\">\n          <MessageHistory messages={this.state.messages} />\n        </div>\n\n        <div>\n          <textarea onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\"></textarea>\n        </div>\n        </div>)\n    }\n      \n}\n\nclass MessageHistory extends React.Component {\n  render() {\n    return(<div>\n      {this.props.messages.map((message, index) => {\n         \n          return(<div key={index}>\n            {(index==0 || message.userID!=this.props.messages[index-1].userID) && \n            <u><b><big>{message.name}</big></b></u>}\n\n            <ChatMessage message={message.message} color={message.color} />\n  \n          </div>) \n      })}\n    </div>)\n  }\n}\n\nclass ChatMessage extends React.Component {\n  render() {\n      return (<div style={{color: `${this.props.color}`}}>{this.props.message}</div>);\n  }\n}\n\nexport default Chat;","import Chat from \"./Chat.js\";\nimport ActiveUsers from \"./ActiveUsers.js\";\nimport dynamic from 'next/dynamic';\n//import Socket from '../Socket/index';\n\nconst Socket = dynamic(\n    () => import(\"../Socket/index.js\"),\n    { ssr: false }\n);\n\nclass InfoTaker extends React.Component {\n    constructor(props) {\n        super(props);\n        \n\n        this.state = {\n            name: '',\n            color: '',\n            userID: '',\n            socket: null,\n            submitted: false,\n            connected: false,\n            pgp: null\n        };\n\n        this.setInfo = this.setInfo.bind(this);\n        this.setConnection = this.setConnection.bind(this);\n        this.setPGP = this.setPGP.bind(this);\n    };\n\n    setInfo (userID, name, color, submitted) {        \n        this.setState({ \n            name: name,\n            color: color,\n            userID: userID,\n            submitted: submitted\n        });\n    };\n\n    setConnection (socket) {\n        if (socket) {\n            this.setState({\n                socket: socket,\n                connected: true\n            });\n        };\n    };\n\n    setPGP (pgp) {\n        if (pgp) {\n            this.setState({\n                pgp: pgp\n            });\n        };\n    };\n\n    render() {\n        if (this.state.submitted == false && this.state.connected == false) {\n            return (\n            <div>\n                <Socket setConnection={this.setConnection} setPGP={this.setPGP} pgp={this.state.pgp} />\n            </div>);\n        }\n        if (this.state.submitted == false && this.state.connected == true) {\n            return (\n                <div>\n                    <div className=\"info-taker\">\n                        <Taker setInfo={this.setInfo} socket={this.state.socket}/>\n                    </div>\n                </div>);\n        } else if (this.state.submitted == true && this.state.connected == true) {\n            let self = {\n                userID: this.state.userID,\n                name: this.state.name,\n                color: this.state.color\n            };\n\n            return (\n                <div>\n                    <div className=\"lobby\">\n                    <div>\n                        <Chat self={self} socket={this.state.socket} />\n                        {/* <ChatBox user={this.props.user} color={this.props.color} socket={this.props.socket} /> */}\n                    </div>\n                    <div className=\"active-users\">\n                        <ActiveUsers self={self} socket={this.state.socket} />\n                    </div>\n                    </div>\n                </div>);\n        }\n    };\n}\n\nclass Taker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.connect = this.connect.bind(this);\n    }\n\n    connect(name, color, submitted) {\n        let that = this,\n            socket = that.props.socket;\n\n        socket.addEventListener('message', function (event) { \n            let data = JSON.parse(event.data);\n            \n            if (data.type == \"identified\"){ \n                console.log(\"identified:\"+data.userID);\n                that.props.setInfo(data.userID, name, color, submitted);\n            }\n        }, {once: true});\n\n        socket.send(JSON.stringify({type:\"identification\", name: name, color: color}));\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        function checkName(name) {\n            if (/\\s/.test(name)) {\n                alert(\"No whitespace in the name, please\")\n                return false;\n            } else if (/\\W/.test(name)) {\n                alert(\"No special characters, please. (Except underscore. We like underscore.)\");\n                return false;\n            } else if (/\\w/.test(name)) {\n                return true;\n            }\n        }\n\n        function checkColor(color) {\n            if (/^#{1}[0123456789abcdef]{6}/.test(color)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        if (checkName(event.target.elements.namedItem(\"name\").value) && checkColor(event.target.elements.namedItem(\"color\").value)) {\n            let name = event.target.elements.namedItem(\"name\").value,\n                color = event.target.elements.namedItem(\"color\").value,\n                submitted = true;\n                            \n            this.connect(name, color, submitted);            \n        } else {\n            return;\n        }\n\n    }\n\n\n    render() {\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Please enter your name and choose a color!<br></br>\n                        <input type=\"text\" name=\"name\" />\n                    </label>\n                    <label>\n                        <input type=\"color\" name=\"color\" />\n                    </label><br></br>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n            );\n    }\n}\n\n\nexport default InfoTaker;","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/parse-int\");","import _Object$defineProperty from \"../../core-js/object/define-property\";\nexport default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import \"../pages/style.css\";\nimport Lobby from \"../components/Lobby/index.js\";\nimport Head from 'next/head';\n\n\nclass Index extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render(){\n        return(<div>\n            <Head>\n                <title>La Pipoette</title>\n            </Head>\n            <div>\n                <Lobby />\n            </div>\n        </div>);\n    }\n}\n\nexport default Index;","module.exports = require(\"axios\");","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/parse-int\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"next/dynamic\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");","module.exports = require(\"react-lineto\");"],"mappingszHA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAMA;AACA;AAEA;AAAA;AAMA;AACA;AAEA;AAAA;AAOA;AACA;AADA;AAEA;AACA;AADA;AAGA;AAQA;AACA;AACA;AAAA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AADA;AAEA;AAAA;AAIA;AACA;AA1GA;AACA;AA2GA;;;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AAjBA;AACA;AAkBA;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAVA;AACA;AAWA;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AApQA;AACA;AAsQA;;;;;;;;;;;;;;;;;;;AC1QA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAfA;AACA;AAgBA;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AAnBA;AACA;AAoBA;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAjBA;AACA;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtlJA;AACA;AAiJA;AACA;AACA;AACA;AACA;AAGA;AACA;AANA;AACA;AAKA;AAMA;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AACA;AACA;AACA;AAFA;AA2CA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAjDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAGA;AACA;AArEA;AACA;AAuEA;AACA;AACA;AAGA;AAAA;AAAA;AAIA;AAAA;AAAA;AAGA;AAEA;AACA;AAfA;AACA;AAgBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAjFA;AACA;AAkFA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AA1EA;AACA;AA4EA;;;;;;;;;;;AC1KA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAhBA;AACA;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}